name: 'Deploy a directory to AWS S3'
description: 'Deploys a directory to AWS S3'
author: 'Rick Meneely <rick@devopspolis.com>'
branding:
  icon: upload-cloud
  color: purple

inputs:
  source:
    description: Directory or file to upload (source)
    type: string
    required: true
  destination:
    description: S3 bucket name or bucket/prefix path (destination)
    type: string
    required: true
  aws_region:
    description: AWS region (uses AWS_REGION, AWS_DEFAULT_REGION, or defaults to us-east-1)
    type: string
    required: false
  delete:
    description: Delete files not in source directory
    type: boolean
    default: true
  script:
    description: Run script (e.g. build.sh --prod)
    type: string
    required: false
    default: ''
  working-directory:
    description: Script directory
    required: false
    default: .
  role:
    description: AWS role to assume (optional - can be handled by calling workflow)
    type: string
    required: false
  tags:
    description: bucket tags (e.g. version=v1.2.0,environment=qa)
    type: string
    required: false
    default: ''

outputs:
  bucket_arn:
    description: The AWS S3 bucket ARN
    value: ${{ steps.bucket_arn.outputs.bucket_arn }}
  integrity_hash:
    description: MD5 hash of directory contents (for integrity verification)
    value: ${{ steps.hash.outputs.integrity_hash }}

runs:
  using: composite
  steps:
    - name: Resolve role ARN if short name
      if: ${{ inputs.role }}
      id: resolve-role
      shell: bash
      run: |
        role="${{ inputs.role }}"
        if [[ "$role" != arn:aws:iam::* ]]; then
          echo "Resolving short role name to full ARN..."
          if [[ -z "$AWS_ACCOUNT_ID" ]]; then
            echo "❌ AWS_ACCOUNT_ID environment variable is required when using short role names"
            exit 1
          fi
          role="arn:aws:iam::${AWS_ACCOUNT_ID}:role/$role"
        fi
        echo "role_arn=$role" >> $GITHUB_OUTPUT
        echo "✅ Using role: $role"

    - name: Configure AWS credentials (if role specified)
      if: ${{ inputs.role }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.resolve-role.outputs.role_arn }}
        role-session-name: GitHubActionDeploySession
        aws-region: ${{ steps.resolve-region.outputs.aws_region }}

    - name: Set destination
      run: |
        destination=(${{ inputs.destination }}" | sed 's#^s3://##')
        echo "destination=${destination}" >> $GITHUB_ENV

    - name: Set delete
      run: |
        if [[ "${{ inputs.delete }}" == "true" ]]; then
          echo "delete_option=--delete" >> $GITHUB_ENV
        else
          echo "delete_option=" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Resolve AWS region
      id: resolve-region
      run: |
        REGION="${{ inputs.aws_region }}"
        if [ -z "$REGION" ]; then
          REGION="${AWS_REGION:-${AWS_DEFAULT_REGION:-us-east-1}}"
        fi
        echo "aws_region=$REGION" >> $GITHUB_OUTPUT
        echo "✅ Using AWS region: $REGION"
      shell: bash

    - name: Validate input source
      run: |
        if [ ! -e "${{ inputs.source }}" ]; then
          echo "❌ Source '${{ inputs.source }}' does not exist"
          exit 1
        fi
      shell: bash

    - name: Run build script (if specified)
      if: ${{ inputs.script != '' }}
      run: |
        full_command="${{ inputs.script }}"
        script=$(echo "$full_command" | awk '{print $1}')
        script_args=$(echo "$full_command" | cut -s -d' ' -f2-)
        if [[ -x "$script" ]]; then
          "./$script" $script_args
        else
          echo "Script '$script' not found or not executable"
          exit 1
        fi
      working-directory: ${{ inputs.working-directory }}
      env:
        SOURCE: ${{ inputs.source }}
        DESTINATION: ${{ env.destination }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        TAGS: ${{ inputs.tags }}
      shell: bash

    - name: Upload to S3
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f "${{ inputs.source }}" ]; then
          echo "▶️ Uploading file '${{ inputs.source }}' to 's3://${{ env.destination }}'..."
          aws s3 cp "${{ inputs.source }}" "s3://${{ env.destination }}" --region ${{ steps.resolve-region.outputs.aws_region }}
        else
          echo "▶️ Syncing directory '${{ inputs.source }}' to 's3://${{ env.destination }}'..."
          aws s3 sync "${{ inputs.source }}" "s3://${{ env.destination }}" ${{ env.delete_option }} --region ${{ steps.resolve-region.outputs.aws_region }}
        fi
      shell: bash

    - name: Add Bucket Tags
      if: ${{ inputs.tags != '' }}
      run: |
        bucket_name=$(echo "${{ env.destination }}" | cut -d'/' -f1)
        echo "Tagging S3 bucket: $bucket_name"

        IFS=',' read -ra PAIRS <<< "${{ inputs.tags }}"
        TAGSET=""
        for pair in "${PAIRS[@]}"; do
          KEY=$(echo "$pair" | cut -d'=' -f1)
          VALUE=$(echo "$pair" | cut -d'=' -f2-)
          TAGSET="${TAGSET}{Key=${KEY},Value=${VALUE}},"
        done

        TAGSET="[${TAGSET%,}]"

        echo "Using TagSet: $TAGSET"
        aws s3api put-bucket-tagging --bucket "$bucket_name" --tagging "TagSet=$TAGSET"
      shell: bash

    - name: Output bucket ARN
      id: bucket_arn
      run: |
        bucket_name=$(echo "${{ env.destination }}" | cut -d'/' -f1)
        echo "bucket_arn=arn:aws:s3:::$bucket_name" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate integrity hash
      id: hash
      run: |
        if [ -f "${{ inputs.source }}" ]; then
          HASH=$(md5sum "${{ inputs.source }}" | awk '{print $1}')
        else
          HASH=$(find "${{ inputs.source }}" -type f -exec md5sum {} + | sort -k 2 | md5sum | awk '{print $1}')
        fi
        echo "integrity_hash=$HASH" >> $GITHUB_OUTPUT
      shell: bash
