name: 'Deploy a directory to AWS S3'
description: 'Deploys a directory to AWS S3'
author: 'Rick Meneely <rick@devopspolis.com>'
branding:
  icon: upload-cloud
  color: purple
inputs:
  directory:
    description: Directory to upload (source)
    type: string
    required: true
  bucket:
    description: AWS S3 Bucket name (destination)
    type: string
    required: true
  bucket_region:
    description: AWS S3 Bucket region
    type: string
    required: true
  delete:
    description: Delete files not in source directory
    type: boolean
    default: true
  ref:
    description: The git branch, tag or SHA to checkout
    type: string
    required: false
    default: ''
  script:
    description: Run script (e.g. build.sh --prod)
    type: string
    required: false
    default: ''
  working-directory:
    description: Script directory
    required: false
    default: .
  role:
    description: AWS role to assume
    type: string
    required: false
  tags:
    description: bucket tags (e.g. version=v1.2.0,environment=qa)
    type: string
    required: false
    default: ''

outputs:
  bucket_arn:
    description: The AWS S3 bucket ARN
    value: ${{ steps.bucket_arn.outputs.bucket_arn }}
  integrity_hash:
    description: MD5 hash of directory contents (for integrity verification)
    value: ${{ steps.hash.outputs.integrity_hash }}
runs:
  using: composite
  steps:
    - name: Resolve role ARN if short name
      if: inputs.role
      id: resolve-role
      shell: bash
      run: |
        role="${{ inputs.role }}"
        if [[ "$role" != arn:aws:iam::* ]]; then
          echo "Resolving short role name to full ARN..."
          role="arn:aws:iam::${ACCOUNT_ID}:role/$role"
        fi
        echo "role_arn=$role" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      if: ${{ inputs.role }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ steps.resolve-role.outputs.role_arn }}
        role-session-name: GitHubActionDeploySession

    - name: Set delete
      run: |
        if [[ "${{ inputs.delete }}" == "true" ]]; then
          echo "delete_option=--delete" >> $GITHUB_ENV
        else
          echo "delete_option=" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set ref
      run: |
        if [ -n "${{ inputs.ref }}" ]; then
          echo "ref=${{ inputs.ref }}" >> $GITHUB_ENV
        else
          echo "ref=${{ github.ref_name }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        ref: ${{ env.ref }}

    - name: Run build script (if specified)
      if: ${{ inputs.script != '' }}
      run: |
        full_command="${{ inputs.script }}"
        script=$(echo "$full_command" | awk '{print $1}')
        script_args=$(echo "$full_command" | cut -s -d' ' -f2-)
        if [[ -x "$script" ]]; then
          "./$script" $script_args
        else
          echo "Script '$script' not found or not executable"
          exit 1
        fi
      working-directory: ${{ inputs.working-directory }}
      env:
        DIRECTORY: ${{ inputs.working-directory }}
        BUCKET: ${{ inputs.bucket }}
        REF: ${{ env.ref }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        TAGS: ${{ inputs.tags }}
      shell: bash

    - name: Upload to S3
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "▶️ Syncing '${{ inputs.directory }}' to 's3://${{ inputs.bucket }}'..."
        aws s3 sync ${{ inputs.directory }} s3://${{ inputs.bucket }} ${{ env.delete_option }} --region ${{ inputs.bucket_region }}
      shell: bash

    - name: Add Bucket Tags
      if: ${{ inputs.tags != '' }}
      run: |
        bucket_name=$(echo "${{ inputs.bucket }}" | cut -d'/' -f1)
        echo "Tagging S3 bucket: $bucket_name"

        # Convert key=value,key2=value2 to JSON TagSet format
        IFS=',' read -ra PAIRS <<< "${{ inputs.tags }}"
        TAGSET=""
        for pair in "${PAIRS[@]}"; do
          KEY=$(echo "$pair" | cut -d'=' -f1)
          VALUE=$(echo "$pair" | cut -d'=' -f2-)
          TAGSET="${TAGSET}{Key=${KEY},Value=${VALUE}},"
        done

        # Remove trailing comma
        TAGSET="[${TAGSET%,}]"

        echo "Using TagSet: $TAGSET"
        aws s3api put-bucket-tagging --bucket "$bucket_name" --tagging "TagSet=$TAGSET"
      shell: bash

    - name: Output bucket ARN
      id: bucket_arn
      run: |
        echo "bucket_arn=arn:aws:s3:::${{ inputs.bucket }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate integrity hash
      id: hash
      run: |
        HASH=$(find "${{ inputs.directory }}" -type f -exec md5sum {} + | sort -k 2 | md5sum | awk '{print $1}')
        echo "integrity_hash=$HASH" >> $GITHUB_OUTPUT
      shell: bash
