name: 'Deploy a directory to AWS S3'
description: 'Deploys a directory to AWS S3'
author: 'Rick Meneely <rick@devopspolis.com>'
branding:
  icon: upload-cloud
  color: purple
inputs:
  directory:
    description: Directory to upload
    required: true
  bucket:
    description: AWS S3 Bucket name
    required: true
  bucket_region:
    description: AWS S3 Bucket region
    type: string
    required: true
  delete:
    description: Deletes files which exist in the destination bucket but not in the source directory
    type: boolean
    default: true
  ref:
    description: The git branch, tag or SHA to checkout
    required: false
    default: ''
  script:
    description: |
      Full command to run a script to create or prepare the directory before uploading
      Example: build.sh --prod
    required: false
    default: ''
  script_args:
    description: Args to pass to script
    required: false
    default: ''
  working-directory:
    description: The directory in which to run the script
    required: false
    default: .
  tags:
    description: |
      Comma-separated list of key=value tags to apply to the bucket.
      Example: Version=v1.2.0,Environment=QA
    type: string
    required: false
    default: ''
outputs:
  bucket_arn:
    description: The AWS S3 bucket ARN
    value: ${{ steps.set-outputs.outputs.bucket_arn }}
runs:
  using: composite
  steps:
    - name: Set delete
      run: |
        if [[ "${{ inputs.delete }}" == "true" ]]; then
          echo "delete_option=--delete" >> $GITHUB_ENV
        else
          echo "delete_option=" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set ref
      run: |
        if [ -n "${{ inputs.ref }}" ]; then
          echo "ref=${{ inputs.ref }}" >> $GITHUB_ENV
        else
          echo "ref=${{ github.ref_name }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        ref: ${{ env.ref }}

    - name: Run build script (if specified)
      if: ${{ inputs.script != '' }}
      run: |
        full_command="${{ inputs.script }}"
        script=$(echo "$full_command" | awk '{print $1}')
        script_args=$(echo "$full_command" | cut -s -d' ' -f2-)
        if [[ -x "$script" ]]; then
          "./$script" $script_args
        else
          echo "Script '$script' not found or not executable"
          exit 1
        fi
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        DIRECTORY: ${{ inputs.working-directory }}
        BUCKET: ${{ inputs.bucket }}
        REF: ${{ env.ref }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        TAGS: ${{ inputs.tags }}

    - name: Upload to S3
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "▶️ Syncing '${{ inputs.directory }}' to 's3://${{ inputs.bucket }}'..."
        aws s3 sync ${{ inputs.directory }} s3://${{ inputs.bucket }} ${{ env.delete_option }} --region ${{ inputs.bucket_region }}

    - name: Add Bucket Tags
      if: ${{ inputs.tags != '' }}
      run: |
        bucket_name=$(echo "${{ inputs.bucket }}" | cut -d'/' -f1)
        echo "Tagging S3 bucket: $bucket_name"

        # Convert key=value,key2=value2 to JSON TagSet format
        IFS=',' read -ra PAIRS <<< "${{ inputs.tags }}"
        TAGSET=""
        for pair in "${PAIRS[@]}"; do
          KEY=$(echo "$pair" | cut -d'=' -f1)
          VALUE=$(echo "$pair" | cut -d'=' -f2-)
          TAGSET="${TAGSET}{Key=${KEY},Value=${VALUE}},"
        done

        # Remove trailing comma
        TAGSET="[${TAGSET%,}]"

        echo "Using TagSet: $TAGSET"
        aws s3api put-bucket-tagging --bucket "$bucket_name" --tagging "TagSet=$TAGSET"
      shell: bash

    - name: Output bucket ARN
      id: set-outputs
      run: |
        echo "bucket_arn=arn:aws:s3:::${{ inputs.bucket }}" >> $GITHUB_OUTPUT
